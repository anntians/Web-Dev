html { /*changing font*/
    font-size: 12px; /* px means "pixels": the base font size is now 10 pixels high  */
    font-family: 'Indie Flower', cursive; /* this should be the rest of the output you got from Google fonts */
  }

  h1 {
    font-size: 70px;
    text-align: center;
    font-family: 'Limelight', cursive; /*will us the cursive font if limelight isn't available*/
    opacity: 10;
    text-transform: uppercase;
    margin: 10px 20px;
    padding: 20px 0;
    color: #CCFFFF;
    text-shadow: 3px 3px 2px #B39F7D;



    
  }

 

  h2{
    font-size: 40px;
    color: #0E22B3;
    transform: scale(1.5); /*scales the element to 1.5 it's size*/

    position:relative; /*set element position to relative, then can do changes*/
    top: -10px; /*also have left, right, bottom, these say how many px, % or em to move item away from it's normal position*/
    left: 250px;
  }

  .move-animation{ /*the element that uses this move animation must have position set to either relative or fixed*/
    animation-name:move;
    animation-duration: 4s;
    animation-iteration-count: infinite; /*animation doesn't stop*/
    animation-timing-function: ease-in;
  }

  /*
  In CSS animations, the animation-timing-function property controls how quickly an animated element changes over 
  the duration of the animation. If the animation is a car moving from point A to point B in a given time (your animation-duration),
  the animation-timing-function says how the car accelerates and decelerates over the course of the drive.
  
  There are a number of predefined keywords available for popular options. For example, the default value is ease, 
  which starts slow, speeds up in the middle, and then slows down again in the end. Other options include ease-out, 
  hich is quick in the beginning then slows down, ease-in, which is slow in the beginning, then speeds up at the end, 
  or linear, which applies a constant animation speed throughout.
  */

  @keyframes move {
    0%{
      color:#0E22B3;
      left:250px;
    }
    50%{
      left:1000px;
      opacity: 0.1;
    }
    
    
  }

  h3, #table-of-contents{
    font-size: 20px;
    color:#0E22B3;
    padding: 10px 30px 10px 30px;
    margin: 10px -15px;
    text-align: center;
    width: 400px;
    margin:auto;
    height: 50pxpx;
    box-shadow: 5px 10px 20px rgba(0,0,0,0.3), 5px 6px 6px rgba(200,0,0,0.3); /*box shadow: x y blur-radius color, can do multiple shadows separate with comma*/

    transform: skewX(10deg);
    transform: skewY(2deg);
  }
  
  p, li, a, label {
    font-size: 15px;
    line-height: 25px;
    letter-spacing: 1px;
    color: #0E22B3;
    margin: 15px;
    text-align: justify;

    
  }

  /*
  .clearfix::after {
    content: "";
    clear: both;
    display: table;
  }

  ul{
    float:right;
  }
  */

  a:hover{ /*pseudo class, changes state of element when hover, the link changes color when i hover over it*/
    color:red;
  }

  /*changing color*/
  html {
    background-color: #FFA62E;
    background:url(https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/rm31-jj-07-g-concrete_2.jpg?w=800&dpr=1&fit=default&crop=default&q=65&vib=3&con=3&usm=15&bg=F4F4F3&ixlib=js-2.2.1&s=1ccaad332c064fb0856a810aa4af6b7d);
  }

  /*styling the body*/
  body {
    width: 900px;
    margin: 0px auto 30px auto;
    /*background-color: rgba(204, 255, 255, 0.4); uses rgba where last place controls opacity*/
    background: linear-gradient(-45deg, rgba(204, 255, 255, 1), rgba(255, 220, 217, 1), rgba(255, 232, 191, 1));
    padding: 0px 20px 20px 20px;
    border: 5px solid black;
  }

  

  /*centering the image*/
  img {
    display: block;
    margin: auto;
    opacity: 1;

    max-width: 100%; /*The max-width of 100% will make sure the image is never wider than the container it is in, and the height of auto will make the image keep its original aspect ratio.*/
    height:auto;
  }

  img:hover{
    animation-name: widen-pic;
    animation-duration: 500ms;
    animation-fill-mode: forwards; /*make the animation stay*/
  }

  @keyframes widen-pic {
    100%{
      transform: scale(1.1);
      opacity: 0.5;
    }
  }

  /*css class*/
  .red-text{
    color: #FF007F;
    font-weight:900;
  }

  :root{ /*declare global variables inside :root, if declare inside a selector it can only be used within that selector*/
    --test:#3BFFDB;
  }
  

  .thick-teal-border{
    border-color: #3BFFDB;
    border-width: 10px;
    border-style:double;
    border-radius: 20%; /*this is for smoothing out corners*/
    
  }

  @media (max-width:1200px){ /*media query, if browser window is less than 1200px the varialbe will turn red*/
    :root{
      --test:red;
    }
  }

  @media(max-height:500px){ /* if browswer window is less than 500px in height then background will will turn color*/
    body{
      background: thistle;
    }
  }

  .teal-background{
    background-color: var(--test, red); /*adding a fallback value red, will be red if the variable doesn't work*/
    border-color: black;
    border-width: 2px;
    border-style: solid;
    
  }

  .striped-background{
    background:repeating-linear-gradient(90deg, #CCFFFF 0px, #FFDCD9 40px, #FFE8BF 80px);
    border-color: black;
    border-width: 1px;
    border-style: solid;
    border-radius: 10px;
  }

  /*id selector*/
  #form{
    background-color: #FFA62E;

    
  }

  /*attribute selector*/
  [type='checkbox']{
    margin: 20px;
  }



  #navbar{
    background-color: #FFA62E;
    margin: 0px -20px;

    z-index: 2; /*z index makes the nav bar be on top if have overlap*/

    width:940px;

    position:fixed; 
    top:0px;
    left:446px;
    
  }

  nav ul{ /*select nav tag's ul*/
    list-style-type: none; /*removes bullets*/
    margin: 0px;
    padding: 0px;
  }

  nav li{
    display: inline;
    margin-right: 30px;
  }

  button{
    color:#0E22B3;
    background-color: #3BFFDB;
  }

  button:hover{
    animation-name: button-color;
    animation-duration: 500ms;
    animation-fill-mode: forwards;
  }

  @keyframes button-color {
    100%{
      background-color: #FFDCD9;
    }
  }

  .make-moon{
    position: absolute;
    margin:0px;
    top:110px;
    bottom:0px;
    left:500px;
    right:0px;
    width:100px;
    height:100px;
    background-color: transparent;
    border-radius: 50%;
    box-shadow: 25px 10px 0 0 #CCFFFF;

    animation-name: rotate-moon;
    animation-duration: 3s;
    animation-iteration-count: infinite;
  }

  @keyframes rotate-moon {
    50%{
      transform: rotate(25deg);
    }
    
  }

  .make-heart{
    position: absolute;
    margin: auto;
    top: -650px;
    right: 0;
    bottom: 0;
    left: 600px;
    background-color: red;
    height: 50px;
    width: 50px;
    transform: rotate(-45deg);
    animation-name: heartbeat;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-timing-function: cubic-bezier(0, 0, 0.58, 1); /*same as ease-out*/
  }

  /*
  The last challenge introduced the animation-timing-function property and a few keywords that change the speed of an animation over its duration. 
  CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.

  In CSS animations, Bezier curves are used with the cubic-bezier function. The shape of the curve represents how the animation plays out. 
  The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), 
  and the Y-axis is the change in the animation.

  The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3. p0 and p3 are set for you - 
  they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values 
  for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. 
  This is done in CSS by declaring the x and y values of the p1 and p2 "anchor" points in the form: (x1, y1, x2, y2). 
  */

  /*
  Similar animation progressions to the ease-out keyword can be achieved by using a custom cubic Bezier curve function.

  In general, changing the p1 and p2 anchor points drives the creation of different Bezier curves, which controls how 
  the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style: animation-timing-function: cubic-bezier(0, 0, 0.58, 1);

  Remember that all cubic-bezier functions start with p0 at (0, 0) and end with p3 at (1, 1). In this example, 
  the curve moves faster through the Y-axis (starts at 0, goes to p1 y value of 0, then goes to p2 y value of 1) 
  than it moves through the X-axis (0 to start, then 0 for p1, up to 0.58 for p2). As a result, the change in the 
  animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, 
  the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the 
  x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.
  */

  @keyframes heartbeat {
    0%{
      transform: scale(1) rotate(-45deg);
    }
    50%{
      transform: scale(0.6) rotate(-45deg);
    }
    
  }

  .make-heart::after{ /*the before and after pseudo-element adds something before or after the element selected, need the content property but here have no content so give ""*/
    background-color: red;
    content: "";
    border-radius: 50%;
    position: absolute;
    width: 50px;
    height: 50px;
    top: 0px;
    left: 25px;
  }

  .make-heart::before{
    content: "";
    background-color: red;
    border-radius: 50%;
    position: absolute;
    width: 50px;
    height: 50px;
    top: -25px;
    left: 0px;
  }

  .heart-background{
    position: absolute;
    background-color: #FFE8BF;
    width:100px;
    height:100px;
    top:115px;
    left:1145px;
    animation-name: heart-back;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-out; 
    
  }

  @keyframes heart-back {
    50%{
      background-color: pink;
    }
    
  }

  /*animation*/
  #h1{
    animation-name: change-color;
    animation-duration: 6s;
    animation-fill-mode:backwards;
    animation-iteration-count: infinite;
  }

  @keyframes change-color {
    0%{
      color:#B3A2A1;
    }
    33%{
      color:#FFDCD9;
    }
    66%{
      color:#FFE8BF;
    }
    100%{
      color: #B3A2A1
    }
    
  }

  .stars {
    background-color: white;
    position:absolute;
    height: 30px;
    width: 30px;
    border-radius: 50%;
    animation-iteration-count: infinite;
  }
  .star-1 {
    margin-top: -90px;
    margin-left: 180px;
    animation-name: twinkle-1;
    animation-duration: 1.1s;
  }
  .star-2 {
    margin-top: -40px;
    margin-left: 80px;
    animation-name: twinkle-2;
    animation-duration: 1s;
  }
  @keyframes twinkle-1 {
    50% {
      transform: scale(0.5);
      opacity: 0.5;
    }
  }

  @keyframes twinkle-2 {
    20% {
      transform: scale(0.5);
      opacity: 0.5;
    }
  }


  .balls {
    border-radius: 50%;
    position: absolute;
    width: 10px;
    height: 10px;
    top: 60%;
    opacity: 0.5;
    animation-name: jump;
    animation-duration: 2s;
    animation-iteration-count: infinite;
  }
  #red {
    background: red;
    left: 25%;
    animation-timing-function: linear;
  }
  #blue {
    background: blue;
    left: 50%;
    animation-timing-function: ease-out;
  }
  #green {
    background: green;
    left: 75%;
    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);
  }

  @keyframes jump {
    50% {
      top: 10%;
    }
  }


  /*flex*/
  #flex-container{
    display:flex;
    height:500px;
    background-color: thistle;
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;
    flex-wrap: wrap;
  }

  /*Adding display: flex to an element turns it into a flex container. This makes it possible 
  to align any children of that element into rows or columns. You do this by adding the 
  flex-direction property to the parent item and setting it to row or column. Creating a row will 
  align the children horizontally, and creating a column will align the children vertically.

  The default value for the flex-direction property is row

  Other options for flex-direction are row-reverse and column-reverse

  */

  /*
  justify-content(along main axis): 
  There are several options for how to space the flex items along the line that is the main axis. One of the 
  most commonly used is justify-content: center;, which aligns all the flex items to the center inside the flex container. Other options include:

  flex-start: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.
  flex-end: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.
  space-between: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.
  space-around: similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container.
  space-evenly: Distributes space evenly between the flex items with a full space at either end of the flex container
  */

  /*
  align-items(along cross axis):
  Flex containers also have a cross axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.

  CSS offers the align-items property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.

  The different values available for align-items include:

  flex-start: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.
  flex-end: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.
  center: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).
  stretch: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. This is the default value if no align-items value is specified.
  baseline: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.
  */

  /*
  flex-wrap: 
  CSS flexbox has a feature to split a flex item into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.

  However, using the flex-wrap property tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.

  CSS also has options for the direction of the wrap:

  nowrap: this is the default setting, and does not wrap items.
  wrap: wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if they are in columns.
  wrap-reverse: wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.
  */

  #box-1 {
    background-color: dodgerblue;
    width: 40%;
    height: 90%;
    align-self: center;
  }

  #box-2 {
    background-color: orangered;
    width: 40%;
    height: 90%;
    align-self: center;
  }

  /*
  align-self:
  The final property for flex items is align-self. This property allows you to adjust each item's alignment individually, 
  instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties float, 
  clear, and vertical-align do not work on flex items.

  align-self accepts the same values as align-items and will override any value set by the align-items property.

  */

  #flex-left{
    background-color: yellow;
    width: 80%;
    height:80%;
    margin: 25px auto;
    

  }

  #flex-right{
    background-color: green;
    width: 80%;
    height:80%;
    margin: 25px auto;
    
  }

  /*grid*/
  .d1{background:LightSkyBlue;}
  .d2{background:LightSalmon;}
  .d3{
    justify-self: center;
    /*
    justify-self: (horizontal)
    In CSS Grid, the content of each item is located in a box which is referred to as a cell. 
    You can align the content's position within its cell horizontally using the justify-self property 
    on a grid item. By default, this property has a value of stretch, which will make the content fill 
    the whole width of the cell. This CSS Grid property accepts other values as well:

  start: aligns the content at the left of the cell,

  center: aligns the content in the center of the cell,

  end: aligns the content at the right of the cell.
    */

    align-self: end; 
    /*
    align-self: (vertical)
    Same as justify-self but vertical
    */

    background:PaleTurquoise;}
  .d4{
    background:LightPink;}
  .d5{
    grid-column: 1/4; 
    /*
    grid-column: 
    The hypothetical horizontal and vertical lines that create the grid are referred to as lines. 
    These lines are numbered starting with 1 at the top left corner of the grid and move right for 
    columns and down for rows, counting upward.

    To control the number of columns an item will consume, you can use the grid-column property in 
    conjunction with the line numbers you want the item to start and stop at.

    */

    grid-row:2/4; /*same idea as grid-column */

    background:PaleGreen;
    grid-area: content; /*will asign this item to the content section of the template area*/

    /*
    grid-area: 
    After creating an area template for your grid container, as shown in the previous challenge, you 
    can place an item in your custom area by referencing the name you gave it. To do this, you use 
    the grid-area property on an item like this:

  .item1 {
    grid-area: header;
  }
    This lets the grid know that you want the item1 class to go in the area named header. In this 
    case, the item will use the entire top row because that whole row is named as the header area.
    */
  }
    .d6{
      background: rosybrown;
    }

  .container {
    font-size: 40px;
    width: 100%;
    background: LightGray;
    display: grid; /*set container display to be grid to use grid properties*/
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));  /*auto 100px 20% 2fr;*/ /*if have repeats then use the repeat(number of repeats, width) function*/
    /*also have auto-fill, which is same as auto-fit but won't stretch to fill container*/
    grid-template-rows: repeat(3, 100px); /*if have repeats then use the repeat(number of repeats, height) function*/
    grid-gap: 10px 15px; 

    /*
    grid-gap is a shorthand property for grid-row-gap and grid-column-gap from the previous 
    two challenges that's more convenient to use. If grid-gap has one value, it will create 
    a gap between all rows and columns. However, if there are two values, it will use the first
    one to set the gap between the rows and the second value for the columns.
    */

    /*
    grid-column-gap: 10px;
    grid-row-gap: 10px;
    */

    /*justify-items:center; /*like justify-self but applies to all items*/
    /*align-items: start; /*like align-self but applies to all items in container*/

    grid-template-areas: 
    "header header header header"
    "content content content ."
    "content content content .";
    /*
    You can group cells of your grid together into an area and give the area a custom name. 
    Do this by using grid-template-areas on the container like this:

  grid-template-areas:
  "header header header"
  "advert content content"
  "footer footer footer";
  The code above merges the top three cells together into an area named header, the bottom 
  three cells into a footer area, and it makes two areas in the middle row; advert and content. 
  Note: Every word in the code represents a cell and every pair of quotation marks represent a row. 
  In addition to custom labels, you can use a period (.) to designate an empty cell in the grid.
    */
    }

    /*
    grid-template-columns : 
    To add some columns to the grid, use the grid-template-columns property on a grid container 

    This will give your grid two columns that are each 50px wide. The number of parameters given 
    to the grid-template-columns property indicates the number of columns in the grid, and the value 
    of each parameter indicates the width of each column.

    You can use absolute and relative units like px and em in CSS Grid to define the size of rows and columns. You can use these as well:

    fr: sets the column or row to a fraction of the available space,

    auto: sets the column or row to the width or height of its content automatically,

    %: adjusts the column or row to the percent width of its container.

    grid-template-columns: auto 50px 10% 2fr 1fr;
    This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.

    */

    /*
    grid-template-row: 

    The grid you created in the last challenge will set the number of rows automatically. To adjust the
     rows manually, use the grid-template-rows property in the same way you used grid-template-columns in the previous challenge.

    */

    .item1 {
      background: LightSkyBlue;
      grid-area: header;
    }
  
    .item2 {
      background: LightSalmon;
      grid-area: advert;
    }
  
    .item3 {
      background: PaleTurquoise;
      grid-area: content;
      display: grid; /*grid within a grid*/
      grid-template-columns: auto 1fr;
    }

    .itemOne {
      background: PaleGreen;
    }
  
    .itemTwo {
      background: BlanchedAlmond;
    }
  
    .item4 {
      background: lightpink;
      grid-area: footer;
    }
  
    .container2 {
      font-size: 1.5em;
      min-height: 300px;
      width: 100%;
      background: LightGray;
      display: grid;
      grid-template-columns: 1fr;
      grid-template-rows: 50px auto 1fr auto;
      grid-gap: 10px;
      grid-template-areas:
        "header"
        "advert"
        "content"
        "footer";
    }
  
    @media (max-width: 1000px){ /*if window is less than 1000px*/
      .container2{
        grid-template-columns: auto 1fr;
        grid-template-rows: auto 1fr auto;
        grid-template-areas:
          "advert header"
          "advert content"
          "advert footer";
      }
    }
  
    @media (max-width: 600px){ /*if window is less than 1000px*/
      .container2{
        grid-template-areas:
        /* Only change code below this line */
          "header header"
          "advert content"
          "footer footer";
        /* Only change code above this line */
      }
    }



  /* float
  #left{
    float:left;
    width:400px;
  }

  #right{
    float:right;
    width:400px;
  }
  */
  
  
/*
text-transform: sets appearance of text(uppercase, lowercase, capitalize...)

position: absolute; position relative to it's parent element(parent must have a position:relative)
position: relative; position normal
position: fixed; position relative to the browser, won't move when scroll


Color:

hsl(hue, saturation, lightness), change lightness: In practice, the 4.5:1 contrast ratio can be reached by shading (adding black to) the darker color and tinting (adding white to) the lighter color. Darker shades on the color wheel are considered to be shades of blues, violets, magentas, and reds, whereas lighter tinted colors are oranges, yellows, greens, and blue-greens

Hue is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.

Saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.

Lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.


Responsive Typography:

Instead of using em or px to size text, you can use viewport units for responsive typography. 
Viewport units, like percentages, are relative units, but they are based off different items. 
Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages 
are relative to the size of the parent container element.

The four different viewport units are:

vw (viewport width): 10vw would be 10% of the viewport's width.
vh (viewport height): 3vh would be 3% of the viewport's height.
vmin (viewport minimum): 70vmin would be 70% of the viewport's smaller dimension (height or width).
vmax (viewport maximum): 100vmax would be 100% of the viewport's bigger dimension (height or width).


*/
  